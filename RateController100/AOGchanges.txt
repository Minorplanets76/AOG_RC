1. UDPComm.Designer.cs	line 883 (end of class)

        #region PGN32740 to Rate Controller
        void SendPGN32740()
        {
            try
            {
                WatchDogCounts++;
                if (WatchDogCounts * tmrWatchdog.Interval > 750)    // 750 ms timer
                {
                    WatchDogCounts = 0;
                    int Temp;
                    byte[] Data = new byte[10];
                    Data[0] = 127;
                    Data[1] = 228;

                    // worked area
                    Temp = (int)(fd.workedAreaTotal / 100.0);   // square meters / 100 = hectares * 100
                    Data[2] = (byte)(Temp >> 8);
                    Data[3] = (byte)Temp;

                    // working width
                    // is supersection on?
                    Temp = 0;
                    if (section[tool.numOfSections].isSectionOn)
                    {
                        Temp = (int)(tool.toolWidth * 100.0);
                    }
                    else
                    {
                        // individual sections are possibly on
                        for (int i = 0; i < tool.numOfSections; i++)
                        {
                            if (section[i].isSectionOn) Temp += (int)(section[i].sectionWidth * 100.0);
                        }
                    }
                    Data[4] = (byte)(Temp >> 8);
                    Data[5] = (byte)Temp;

                    // speed
                    Temp = (int)(pn.speed * 100);
                    Data[6] = (byte)(Temp >> 8);
                    Data[7] = (byte)Temp;

                    // relay bytes
                    BuildMachineByte();
                    Data[8] = mc.machineData[mc.mdSectionControlByteHi];
                    Data[9] = mc.machineData[mc.mdSectionControlByteLo];

                    if (isUDPSendConnected)
                    {
                        // send data
                        // local host
                        IPAddress RCip = IPAddress.Parse("127.100.0.0");
                        IPEndPoint RCendPt = new IPEndPoint(RCip, 8120);
                        sendSocket.BeginSendTo(Data, 0, Data.Length, SocketFlags.None, RCendPt, new AsyncCallback(SendData), null);

                        // Lan
                        IPEndPoint epAutoSteer = new IPEndPoint(epIP, Properties.Settings.Default.setIP_autoSteerPort);
                        sendSocket.BeginSendTo(Data, 0, Data.Length, SocketFlags.None, epAutoSteer, new AsyncCallback(SendData), null);
                    }

                    if (spMachine.IsOpen)
                    {
                        // send data USB
                        try
                        {
                            spMachine.Write(Data, 0, Data.Length);
                        }
                        catch (Exception e)
                        {
                            WriteErrorLog("PGN32740 to Machine Port " + e.ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
        #endregion





2. GUI.Designer.cs line 1266	(at the start of the tmrWatchdog_tick sub)
                    // send PGN to rate controller
                    SendPGN32740();


3. FormGPS.cs	line 251
        // RateController timer
        private int WatchDogCounts = 0;

	
